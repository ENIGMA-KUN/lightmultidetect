version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./visualizations:/app/visualizations
      - ./model_weights:/app/backend/ml/models/weights
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - deepfake_network

  # Celery worker for background processing
  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python start_worker.py --concurrency=1
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./visualizations:/app/visualizations
      - ./model_weights:/app/backend/ml/models/weights
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - backend
    restart: unless-stopped
    networks:
      - deepfake_network

  # Redis for message broker and result backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - deepfake_network

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - deepfake_network

volumes:
  redis_data:

networks:
  deepfake_network:
    driver: bridge